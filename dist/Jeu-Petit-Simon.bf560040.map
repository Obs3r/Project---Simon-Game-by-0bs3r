{"version":3,"sources":["index.js"],"names":["topLeft","document","querySelector","topRight","bottomLeft","bottomRight","getRandomPanel","panels","parseInt","Math","random","length","sequence","sequenceToGuess","flash","Promise","panel","className","setTimeout","replace","resolve","canClick","panelClicked","expectedPanel","shift","push","startFlashing","alert"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,UAAUC,SAASC,aAAT,CAAuB,sBAAvB,CAAhB;AACA,IAAMC,WAAWF,SAASC,aAAT,CAAuB,qBAAvB,CAAjB;AACA,IAAME,aAAaH,SAASC,aAAT,CACjB,qBADiB,CAAnB;AAGA,IAAMG,cAAcJ,SAASC,aAAT,CAClB,oBADkB,CAApB;;AAIA,IAAMI,iBAAiB,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,SAAS,CACbP,OADa,EAEbG,QAFa,EAGbC,UAHa,EAIbC,WAJa,CAAf;AAMA,SAAOE,OAAOC,SAASC,KAAKC,MAAL,KAAgBH,OAAOI,MAAhC,CAAP,CAAP;AACD,CARD;;AAUA,IAAMC,WAAW,CAACN,gBAAD,CAAjB;AACA,IAAIO,4BAAsBD,QAAtB,CAAJ;;AAEA,IAAME,QAAQ,SAARA,KAAQ,QAAS;AACrB,SAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5BC,UAAMC,SAAN,IAAmB,SAAnB;AACAC,eAAW,YAAM;AACfF,YAAMC,SAAN,GAAkBD,MAAMC,SAAN,CAAgBE,OAAhB,CAChB,SADgB,EAEhB,EAFgB,CAAlB;AAIAD,iBAAW,YAAM;AACfE;AACD,OAFD,EAEG,GAFH;AAGD,KARD,EAQG,IARH;AASD,GAXM,CAAP;AAYD,CAbD;;AAeA,IAAIC,WAAW,KAAf;;AAEA,IAAMC,eAAe,qCAAgB;AACnC,MAAI,CAACD,QAAL,EAAe;AACf,MAAME,gBAAgBV,gBAAgBW,KAAhB,EAAtB;AACA,MAAID,kBAAkBD,aAAtB,EAAoC;AAClC,QAAIT,gBAAgBF,MAAhB,KAA2B,CAA/B,EAAkC;AAChC;AACAC,eAASa,IAAT,CAAcnB,gBAAd;AACAO,kCAAsBD,QAAtB;AACAc;AACD;AACF,GAPD,MAOO;AACL;AACAC,UAAM,WAAN;AACD;AACF,CAdD;;AAgBA,IAAMD;AAAA,qEAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpBL,uBAAW,KAAX;AADoB;AAAA;AAAA;AAAA;AAAA,wBAEAT,QAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAETI,iBAFS;AAAA;AAAA,mBAGZF,MAAME,KAAN,CAHY;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAKpBK,uBAAW,IAAX;;AALoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAQAK","file":"Jeu-Petit-Simon.bf560040.map","sourceRoot":"..","sourcesContent":["const topLeft = document.querySelector('.panneau-haut-gauche');\r\nconst topRight = document.querySelector('.panneau-haut-droit');\r\nconst bottomLeft = document.querySelector(\r\n  '.panneau-bas-gauche'\r\n);\r\nconst bottomRight = document.querySelector(\r\n  '.panneau-bas-droit'\r\n);\r\n\r\nconst getRandomPanel = () => {\r\n  const panels = [\r\n    topLeft,\r\n    topRight,\r\n    bottomLeft,\r\n    bottomRight\r\n  ];\r\n  return panels[parseInt(Math.random() * panels.length)];\r\n};\r\n\r\nconst sequence = [getRandomPanel()];\r\nlet sequenceToGuess = [...sequence];\r\n\r\nconst flash = panel => {\r\n  return new Promise(resolve => {\r\n    panel.className += ' active';\r\n    setTimeout(() => {\r\n      panel.className = panel.className.replace(\r\n        ' active',\r\n        ''\r\n      );\r\n      setTimeout(() => {\r\n        resolve();\r\n      }, 250);\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nlet canClick = false;\r\n\r\nconst panelClicked = panelClicked => {\r\n  if (!canClick) return;\r\n  const expectedPanel = sequenceToGuess.shift();\r\n  if (expectedPanel === panelClicked) {\r\n    if (sequenceToGuess.length === 0) {\r\n      // start new round\r\n      sequence.push(getRandomPanel());\r\n      sequenceToGuess = [...sequence];\r\n      startFlashing();\r\n    }\r\n  } else {\r\n    // end game\r\n    alert('game over');\r\n  }\r\n};\r\n\r\nconst startFlashing = async () => {\r\n  canClick = false;\r\n  for (const panel of sequence) {\r\n    await flash(panel);\r\n  }\r\n  canClick = true;\r\n};\r\n\r\nstartFlashing();"]}